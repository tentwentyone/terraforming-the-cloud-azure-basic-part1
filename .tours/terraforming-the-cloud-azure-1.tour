{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "terraforming-the-cloud-azure-1",
  "steps": [
    {
      "file": "README.md",
      "description": "Bem-vindo ao workshop!\n\nAqui tens um breve resumo dos conteúdos abordados neste módulo.\n\nAproveita para dar uma vista de olhos nos tópicos e verificar se tens todos os requisitos para prosseguir com o workshop.",
      "line": 1
    },
    {
      "file": "README.md",
      "description": "Certifica-te que estás no teu terminal fazendo o comando:\n- **ctrl+ç**\n\nAlternativamente, no canto superior esquerdo, podes também clicar em:\n\n- **View** e depois selecionar **Terminal**",
      "line": 5
    },
    {
      "file": "README.md",
      "description": "No terminal faz login em Azure utilizando o comando:\n>> az login --use-device-code --tenant nosportugal.onmicrosoft.com",
      "line": 11
    },
    {
      "file": "README.md",
      "description": "Para definir a subscrição:\n\n- Seleciona-a de entre as opções disponíveis no teu terminal recorrendo ao Nº da mesma.\n\nAlternativamente executa o comando:\n\n>> az account set --subscription tto-terraform-workshops-np\n\nSe quiseres ver todas as tuas subscrições utiliza:\n\n>> az account list --output table",
      "line": 13,
      "selection": {
        "start": {
          "line": 3,
          "character": 35
        },
        "end": {
          "line": 3,
          "character": 51
        }
      }
    },
    {
      "file": "README.md",
      "description": "Certifica-te que estás na subscrição correcta utilizando o comando:\n\n>> az account show",
      "line": 12
    },
    {
      "file": "scripts/get-azure-credentials.sh",
      "description": "Executa o seguinte script com o comando:\n\n>> source ./scripts/get-azure-credentials.sh",
      "line": 1
    },
    {
      "file": "main.tf",
      "description": "1. **O primeiro contacto**\n\nNesta secção iremos executar os 4 principais comandos de terraform: init, plan, apply e destroy.\n\n**[terraform init](https://developer.hashicorp.com/terraform/cli/commands/init)**\n- O comando terraform init é utilizado para inicializar uma diretoria que contém ficheiros de configuração de Terraform. Este é o primeiro comando que deve ser executado após escrever uma nova configuração de Terraform ou clonar uma existente. É seguro executar este comando várias vezes.",
      "line": 1,
      "selection": {
        "start": {
          "line": 18,
          "character": 3
        },
        "end": {
          "line": 18,
          "character": 18
        }
      }
    },
    {
      "file": "main.tf",
      "description": "Para começar executa o comando:\n\n>> terraform init",
      "line": 2,
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 3,
          "character": 21
        }
      }
    },
    {
      "file": "main.tf",
      "description": "**[terraform plan](https://developer.hashicorp.com/terraform/cli/commands/plan)**\n\nO comando terraform plan cria um plano de execução, permitindo visualizar antecipadamente as alterações que o Terraform pretende fazer à infraestrutura. Por predefinição, quando o Terraform cria um plan:\n\n- Lê o estado atual de quaisquer objetos remotos existentes para garantir que o estado do Terraform está atualizado.\n- Compara a configuração atual com o estado anterior e regista quaisquer diferenças.\n- Propõe um conjunto de ações que, se aplicadas, farão com que os objetos remotos correspondam à configuração.",
      "line": 1
    },
    {
      "file": "main.tf",
      "description": "Para veres as alterações a serem feitas à tua infraestrutura executa o comando:\n\n>> terraform plan",
      "line": 3
    },
    {
      "file": "main.tf",
      "description": "**[terraform apply](https://developer.hashicorp.com/terraform/cli/commands/apply)**\n\n- O comando terraform apply executa as ações propostas num plan de Terraform.",
      "line": 2
    },
    {
      "file": "main.tf",
      "description": "Para aplicares as alterações executa o comando:\n\n>> terraform apply\n\n❗Não te esqueças de escrever **yes** para confirmar o apply.\n\n⏳ Tempo do apply - 1 min.",
      "line": 4
    },
    {
      "file": "main.tf",
      "description": "Para verificares que os recursos remotos foram criados executa o comando:\n\n>> az group show --name=$(terraform output -raw my_identifier)-rg --output table\n\nExamina todos os resource groups criados com o comando:\n\n>> az group list --output table",
      "line": 5,
      "selection": {
        "start": {
          "line": 3,
          "character": 5
        },
        "end": {
          "line": 3,
          "character": 82
        }
      }
    },
    {
      "file": "main.tf",
      "description": "**[terraform destroy](https://developer.hashicorp.com/terraform/cli/commands/destroy)**\n\n- O comando terraform destroy é uma forma prática de destruir todos os objetos geridos por uma determinada configuração de Terraform.\n\nEmbora normalmente não se queira destruir objetos num ambiente de produção, o Terraform é, por vezes, utilizado para gerir infraestrutura efémera para fins de desenvolvimento. Nesse caso, podemos utilizar o terraform destroy para apagar todos estes recursos.",
      "line": 3
    },
    {
      "file": "main.tf",
      "description": "Vamos destruir os recursos, para tal executa o comando:\n\n>> terraform destroy\n\n⏳ Tempo do destroy - 1 min.",
      "line": 7
    },
    {
      "file": "main.tf",
      "description": "Confirma a destruição dos recursos:\n\n>> az group list --output table | grep '$(terraform output -raw my_identifier)-rg'\n\nNão deverá apresentar resultados porque estes recursos foram destruídos.",
      "line": 8,
      "selection": {
        "start": {
          "line": 6,
          "character": 37
        },
        "end": {
          "line": 6,
          "character": 53
        }
      }
    },
    {
      "file": "main.tf",
      "selection": {
        "start": {
          "line": 72,
          "character": 1
        },
        "end": {
          "line": 125,
          "character": 4
        }
      },
      "description": "2. Lidar com as alterações\n\nNesta secção iremos demonstrar a utilização de terraform perante vários tipos de alterações.\n\nDescomenta o bloco referente ao **Exercicio 2.**\n\nSeleciona o bloco referente ao **Exercício 2** e prime:\n\n- Windows: **ctrl+k+u**\n- Mac: **cmd+k+u**.\n\n❗Certifica-te que o ficheiro está guardado com o comando:\n\n- Windows: **ctrl+s**.\n- Mac: **cmd+s**."
    },
    {
      "file": "main.tf",
      "description": "Executa o plan:\n\n>> terraform plan\n\n⚠️ Repara que os recursos criados no **Exercício 1** vão ser recriados. Isto acontece porque apesar de terem sido destruídos na atividade anterior continuam declarados no código.",
      "line": 60
    },
    {
      "file": "main.tf",
      "description": "Executa o apply:\n\n>> terraform apply\n\n❗Não te esqueças de escrever yes para confirmar o apply.\n\n⌛Tempo do apply 2:00 min.",
      "line": 62
    },
    {
      "file": "main.tf",
      "description": "Verifica que a tua virtual machine foi criada!\n\n>> az vm show -g=$(terraform output -raw my_identifier)-rg -n=$(terraform output -raw my_identifier)-vm -d --output table\n\nSe quiseres ver todas as virtual machines criadas executa o comando:\n\n>> az vm list --output table",
      "line": 63
    },
    {
      "file": "main.tf",
      "selection": {
        "start": {
          "line": 94,
          "character": 1
        },
        "end": {
          "line": 97,
          "character": 8
        }
      },
      "description": "Localiza o recurso **azurerm_virtual_machine.default** e descomenta o campo **tags**\n\nSeleciona o conteúdo e prime:\n\n- Windows: **ctrl+k+u**\n- Mac: **cmd+k+u**.\n\n❗Certifica-te que o ficheiro está guardado com o comando:\n\n- Windows: **ctrl+s**.\n- Mac: **cmd+s**."
    },
    {
      "file": "main.tf",
      "description": "Executa o plan:\n\n>> terraform plan\n\nExecuta o apply:\n\n>> terraform apply\n\n⌛Tempo do apply 30 sec.",
      "line": 81
    },
    {
      "file": "main.tf",
      "description": "Podes ver a tag que adicionaste à tua Virtual Machine com o comando:\n\n>> az vm show --name $(terraform output -raw my_identifier)-vm --resource-group $(terraform output -raw my_identifier)-rg --query \"tags\"",
      "line": 83
    },
    {
      "file": "main.tf",
      "selection": {
        "start": {
          "line": 73,
          "character": 1
        },
        "end": {
          "line": 73,
          "character": 65
        }
      },
      "description": "2.2 **Introduzindo alterações disruptivas**\n\nLocaliza o recurso **azurerm_virtual_machine.default** e altera o campo *name* para o seguinte:\n\n- **\"${random_pet.this.id}-vm-new\"**\n\n❗Certifica-te que o ficheiro está guardado com o comando:\n\n- Windows: **ctrl+s**.\n- Mac: **cmd+s**."
    },
    {
      "file": "main.tf",
      "description": "- Executa o **terraform plan** e verifica que o Terraform irá efectuar um *replacement* - é uma alteração disruptiva.\n\n>> terraform plan\n\nExecuta o apply:\n\n>> terraform apply\n\n⌛Tempo do apply 2 min.\n",
      "line": 66
    },
    {
      "file": "main.tf",
      "description": "Verifica que a nova virtual machine foi criada!\n\n>> az vm show -g=$(terraform output -raw my_identifier)-rg -n=$(terraform output -raw my_identifier)-vm-new -d --output table\n\nPara veres todas as Virtual Machines executa o comando:\n\n>> az vm list --output table",
      "line": 55
    },
    {
      "file": "terraform.tfvars",
      "selection": {
        "start": {
          "line": 6,
          "character": 1
        },
        "end": {
          "line": 6,
          "character": 24
        }
      },
      "description": "2.3 **Introduzindo alterações dependentes**\n\n- Altera o valor da variavel prefix de **az** para **new**\n\n❗Certifica-te que as tuas alterações estão guardadas com o comando:\n\n- Windows: **ctrl+s**.\n- Mac: **cmd+s**."
    },
    {
      "file": "terraform.tfvars",
      "description": "Executa o plan e verifica que todo o grafo de dependências é afetado:\n\n>> terraform plan\n\nExecuta o apply\n\n>> terraform apply\n\n⌛Tempo do apply 4:00 min.\n\n*Notem que apenas alterámos uma mera variável...*",
      "line": 4
    },
    {
      "file": "import-exercise.tf",
      "description": "3. **[Terraform Import](https://developer.hashicorp.com/terraform/tutorials/state/state-import) & Move**\n\nTerraform Import possibilita colocar infraestrutura já existente sob a tua gestão. Ao importar recursos para o terraform, podes gerir a tua infraestrutura de maneira coerente e consistente utilizando um fluxo de trabalho comum.\n\nEsta é uma boa maneira de se fazer uma transição gradual da infraestrutura para o terraform, ou de garantir que no futuro podemos utilizar o terraform, mesmo que actualmente ele não tenha todas as capacidades que desejaríamos.",
      "line": 1
    },
    {
      "file": "import-exercise.tf",
      "description": "Assegura-te que não existem alterações pendententes:\n\n>> terraform plan\n\nSe o plan apresentar mudanças, façam o apply com o comando:\n\n>> terraform apply",
      "line": 2
    },
    {
      "file": "import-exercise.tf",
      "description": "3.1 **Criar um recurso (azurerm_virtual_network) usando os comandos azure**\n\nNesta parte vamos criar recursos recorrendo a uma ferramenta externa ao terraform por forma a criar um use-case de recursos que existem fora do state do terraform.\n\nO objetivo é simular recursos que já existiam para que os possamos terraformar.\n\nCria uma Virtual Network com o comando:\n\n>> az network vnet create --name=$(terraform output -raw my_identifier)-import-vnet --subscription=\"$(terraform output -raw subscription_name)\" --resource-group=$(terraform output -raw my_identifier)-rg\n\n⌛Tempo para a criação do recurso 30 segundos.\n\nPara verificar se a virtual network foi criada:\n\n>> az network vnet show --name=$(terraform output -raw my_identifier)-import-vnet --subscription=\"$(terraform output -raw subscription_name)\" --resource-group=$(terraform output -raw my_identifier)-rg --output table\n\nPara verificar todas as virtual networks existentes:\n\n>> az network vnet list --output table",
      "line": 4
    },
    {
      "file": "import-exercise.tf",
      "description": "3.2 **Importar recursos existentes**\n\nNesta parte vamos criar o bloco de import para fazer a importação do recurso criado anteriormente.\n\nO processo de importação de recursos consiste em duas partes:\n\n- Obtenção da informação do recurso na cloud.\n- Criação de um bloco import que irá indicar ao terraform que o recurso já existe e que o mesmo deve ser gerido pelo terraform.",
      "line": 8
    },
    {
      "file": "import-exercise.tf",
      "description": "O primeiro passo da importação de recursos é declarar a importação dos mesmos.\n\nPara isto, temos que definir o bloco import, que necessita de dois argumentos:\n\n- id: o id do recurso a importar do lado de Azure\n- to: o identificador terraform do recurso a importar",
      "line": 14
    },
    {
      "file": "import-exercise.tf",
      "selection": {
        "start": {
          "line": 21,
          "character": 1
        },
        "end": {
          "line": 39,
          "character": 1
        }
      },
      "description": "Para o exercicio que segue, descomenta o conteúdo no ficheiro **import-exercise.tf**\n\nUtiliza o comando:\n\n- Windows: **ctrl+k+u**\n- Mac: **cmd+k+u**.\n\n❗Verifica se as tuas alterações estão guardadas com o comando:\n\n- Windows: **ctrl+s**.\n- Mac: **cmd+s**.\n"
    },
    {
      "file": "import-exercise.tf",
      "description": "O que estamos a fazer é a definir um **bloco de import** em que especificamos o recurso a importar e o seu destino.\n\nTemos no entanto de definir o destino do mesmo para que possamos alojar o recurso e passar a geri-lo por terraform, é essa a razão pela qual definimos um **bloco de resource** no import-exercise.tf.\n\n",
      "line": 10
    },
    {
      "file": "import-exercise.tf",
      "description": "Executa o plan:\n\n>> terraform plan\n\nO resultado do plan deverá de apresentar:\n\n```Plan: 1 to import, 0 to add, 0 to change, 0 to destroy.```\n\nExecuta o apply:\n\n>> terraform apply\n\n⌛Tempo do apply - 10 segundos.",
      "line": 11
    },
    {
      "file": "import-exercise.tf",
      "description": "Executa o plan:\n\n>> terraform plan\n\nSe o terraform indicar que não tem alterações à infraestrutura, confirma-se que os recursos foram importados com sucesso.",
      "line": 13
    },
    {
      "file": "move-exercise.tf",
      "description": "3.3 **Move**\n\nO [move](https://developer.hashicorp.com/terraform/cli/state/move) é usado em casos onde é importante preservar o objeto existente na infraestrutura, reorganizando a nossa configuração de Terraform, renomeando recursos, entre outros casos mais complexos como movendo recursos entre módulos.\n\nVamos agora supôr que queremos mudar o nome dum recurso em terraform. Se formos mudar o nome do recurso, o terraform irá considerar que estamos a destruir o recurso anterior e a querer criar um novo com as mesmas especificações.\n\nPara evitar esse comportamento, uma vez que não queremos destruir o recurso, vamos usar o move.",
      "line": 1
    },
    {
      "file": "move-exercise.tf",
      "selection": {
        "start": {
          "line": 19,
          "character": 1
        },
        "end": {
          "line": 23,
          "character": 4
        }
      },
      "description": "No ficheiro **move-exercise.tf** descomenta o **resource** do **random.pet** **( Exercicio 3.3.1)**\nSeleciona o conteúdo e utiliza o comando:\n\n- Windows: **ctrl+k+u**\n- Mac: **cmd+k+u**.\n\nExecuta o plan:\n\n>> terraform plan\n\nExecuta o apply:\n\n>> terraform apply\n\n⌛Tempo do apply - 20 segundos."
    },
    {
      "file": "move-exercise.tf",
      "selection": {
        "start": {
          "line": 19,
          "character": 1
        },
        "end": {
          "line": 19,
          "character": 35
        }
      },
      "description": "Agora, vamos mudar o nome do recurso **resource \"random_pet\" \"new_id\"**.\n\nAltera o nome para:\n\n- **resource \"random_pet\" \"moved\"**."
    },
    {
      "file": "move-exercise.tf",
      "description": "Como podem ver, ao alterar o nome do recurso o terraform pretende destruir o recurso anterior e criar um novo.\n\n⚠️ **NÃO DESTRUIR OS RECURSOS / NÃO FAZER APPLY DOS RECURSOS**",
      "line": 7
    },
    {
      "file": "move-exercise.tf",
      "selection": {
        "start": {
          "line": 27,
          "character": 1
        },
        "end": {
          "line": 30,
          "character": 4
        }
      },
      "description": "Para alterar o nome do recurso sem que o mesmo seja destruído, descomentamos o **bloco moved** **(Exercicio 3.3.2)**.\n\nIsto fará com que o nome do recurso seja alterado, evitando que este seja destruído e recriado.\n\nUtiliza o comando:\n\n- Windows: **ctrl+k+u**\n- Mac: **cmd+k+u**.\n"
    },
    {
      "file": "move-exercise.tf",
      "description": "Executa o plan:\n\n>> terraform plan\n\nO resultado deverá ser algo como:\n\n```random_pet.new_id has moved to random_pet.moved```",
      "line": 9
    },
    {
      "file": "move-exercise.tf",
      "description": "Executa o apply:\n\n>> terraform apply\n\n⌛Tempo do apply - 20 segundos.\n\nDesta forma, conseguimos manter o mesmo objeto e mudar o seu nome, sem ter de o destruir!",
      "line": 11
    },
    {
      "file": "last-exercise.tf",
      "description": "4. **Exercício**\n\nNeste exercicio o objectivo é aplicar alguns dos conhecimentos adquiridos nesta sessão sem que exista uma solução pronta para descomentarem 😉.\n\n👉 Criar uma User-Assigned Managed Identity com os seguintes requisitos:\n- name deverá ser prefixada com valor definido no recurso random_pet.this.id para evitar colisões de nomes\n\n👉 Criar uma Azure Virtual Machine com os seguintes requisitos:\n- Nome da máquina deverá ser: ${random_pet.this.id}-vm-final\n- Tipo de máquina: Standard_B1ls\n- Zona: westeurope\n- Deverá conter uma tag.\n- A rede (subnetwork) onde a VM vai correr fica ao vosso critério: podem criar uma nova, ou podem usar as já existentes.\n- A máquina deverá correr com a azurerm_user_assigned_identity previamente criada.\n\n👉 Devem fazer o exercicio no ficheiro last-exercise.tf.",
      "line": 1
    },
    {
      "file": "last-exercise.tf",
      "description": "Ajudas😵\n💡 Usem a pesquisa no terraform registry / azure para saberem mais informação acerca dos recursos que estão a usar:\n\n- [azurerm_user_assigned_identity](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/user_assigned_identity)\n- [azurerm_virtual_machine](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/linux_virtual_machine)\n- [azurerm_network_interface](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/network_interface)\n- [azurerm_subnet](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/subnet)\n\n💡 Uma subnet já existente poderá ser **azurerm_subnet.default.id.**",
      "line": 2
    },
    {
      "file": "main.tf",
      "description": "5. **Wrap-up & Destroy**\n\nDestruir os conteúdos!\n\n>> terraform destroy\n\n🔚🏁 Chegámos ao fim 🏁🔚",
      "line": 113
    }
  ],
  "ref": "main"
}